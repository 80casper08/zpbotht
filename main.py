import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from flask import Flask
from threading import Thread

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TOKEN2")
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°—Ç–∞–Ω–∏
class SalaryForm(StatesGroup):
    grade = State()
    day_shifts = State()
    night_shifts = State()
    overtime_shifts = State()
    bonus_percent = State()

# –î–∞–Ω—ñ –ø–æ –≥—Ä–µ–π–¥–∞—Ö
GRADE_DATA = {
    "Low": {"monthly": 16800, "bonus": 4100},
    "Middle": {"monthly": 17500, "bonus": 4400},
    "High": {"monthly": 18500, "bonus": 4500}
}

PERCENT_OPTIONS = [100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50]

start_kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")]], resize_keyboard=True)

@dp.message(F.text == "/start")
@dp.message(F.text == "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç")
async def start(message: types.Message, state: FSMContext):
    buttons = [[KeyboardButton(text=grade)] for grade in GRADE_DATA]
    await message.answer("üë∑ –í–∏–±–µ—Ä–∏ —Å–≤—ñ–π –≥—Ä–µ–π–¥:", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))
    await state.set_state(SalaryForm.grade)

@dp.message(SalaryForm.grade)
async def get_grade(message: types.Message, state: FSMContext):
    grade = message.text
    if grade not in GRADE_DATA:
        await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –≥—Ä–µ–π–¥. –û–±–µ—Ä–∏ –∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(grade=grade)
    await message.answer("üî¢ –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–µ–Ω–Ω–∏—Ö –∑–º—ñ–Ω:")
    await state.set_state(SalaryForm.day_shifts)

@dp.message(SalaryForm.day_shifts)
async def get_day_shifts(message: types.Message, state: FSMContext):
    try:
        day_shifts = int(message.text)
        await state.update_data(day_shifts=day_shifts)
        await message.answer("üåô –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω—ñ—á–Ω–∏—Ö –∑–º—ñ–Ω:")
        await state.set_state(SalaryForm.night_shifts)
    except:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ")

@dp.message(SalaryForm.night_shifts)
async def get_night_shifts(message: types.Message, state: FSMContext):
    try:
        night_shifts = int(message.text)
        await state.update_data(night_shifts=night_shifts)
        await message.answer("‚è±Ô∏è –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–≤–µ—Ä—Ç–∞–π–º—ñ–≤:")
        await state.set_state(SalaryForm.overtime_shifts)
    except:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ")

@dp.message(SalaryForm.overtime_shifts)
async def get_overtime_shifts(message: types.Message, state: FSMContext):
    try:
        overtime = int(message.text)
        await state.update_data(overtime_shifts=overtime)

        buttons = [[KeyboardButton(text=f"{percent}%")] for percent in PERCENT_OPTIONS]
        buttons.append([KeyboardButton(text="–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É")])
        await message.answer("üéØ –û–±–µ—Ä–∏ –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–µ–º—ñ—ó –∞–±–æ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 80):", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))
        await state.set_state(SalaryForm.bonus_percent)
    except:
        await message.answer("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ")

@dp.message(SalaryForm.bonus_percent)
async def get_bonus_percent(message: types.Message, state: FSMContext):
    try:
        percent = int(message.text.replace("%", ""))
        if not 0 <= percent <= 200:
            raise ValueError
        data = await state.get_data()

        grade = data["grade"]
        day = data["day_shifts"]
        night = data["night_shifts"]
        overtime = data["overtime_shifts"]

        monthly_rate = GRADE_DATA[grade]["monthly"]
        base_bonus = GRADE_DATA[grade]["bonus"]

        hourly_rate = monthly_rate / 168
        day_salary = day * 11 * hourly_rate
        night_salary = night * ((3 * hourly_rate) + (8 * hourly_rate * 1.2))
        overtime_salary = overtime * 11 * hourly_rate * 2
        bonus = base_bonus * (percent / 100)

        total = round(day_salary + night_salary + overtime_salary + bonus)

        await message.answer(
            f"üíº –ì—Ä–µ–π–¥: {grade}\n"
            f"‚òÄÔ∏è –î–µ–Ω–Ω–∏—Ö –∑–º—ñ–Ω: {day}\n"
            f"üåô –ù—ñ—á–Ω–∏—Ö –∑–º—ñ–Ω: {night}\n"
            f"üïí –û–≤–µ—Ä—Ç–∞–π–º—ñ–≤: {overtime}\n"
            f"üéÅ –ü—Ä–µ–º—ñ—è: {percent}%\n\n"
            f"üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {total} –≥—Ä–Ω",
            reply_markup=start_kb
        )
        await state.clear()
    except:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 200 –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏")

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep_alive
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î 24/7 ‚úÖ"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    thread = Thread(target=run_flask)
    thread.start()

# –ó–∞–ø—É—Å–∫
async def main():
    keep_alive()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
